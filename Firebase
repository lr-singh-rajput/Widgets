lib/
│
├── models/          → Data models
├── controllers/     → Business logic / state management
├── services/        → Firebase & API calls
├── views/           → UI pages/screens
│   ├── home_page.dart
│   └── login_page.dart
├── widgets/         → Reusable widgets
├── utils/           → Helpers, constants, validators
└── main.dart        → App entry point



user model.dart
class UserModel {
  final String uid;
  final String name;
  final String email;

  UserModel({required this.uid, required this.name, required this.email});

  // From Firestore to Dart object
  factory UserModel.fromMap(Map<String, dynamic> map) {
    return UserModel(
      uid: map['uid'],
      name: map['name'],
      email: map['email'],
    );
  }

  // From Dart object to Firestore
  Map<String, dynamic> toMap() {
    return {
      'uid': uid,
      'name': name,
      'email': email,
    };
  }
}


auth controller.dart
import 'package:firebase_auth/firebase_auth.dart';
import '../models/user_model.dart';
import '../services/database_service.dart';

class AuthController {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  Future<UserModel?> signIn(String email, String password) async {
    try {
      final result = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      if (result.user != null) {
        return await DatabaseService().getUser(result.user!.uid);
      }
    } catch (e) {
      print(e);
    }
    return null;
  }
}

database server.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/user_model.dart';

class DatabaseService {
  final CollectionReference users = FirebaseFirestore.instance.collection('users');

  Future<void> saveUser(UserModel user) async {
    return await users.doc(user.uid).set(user.toMap());
  }

  Future<UserModel> getUser(String uid) async {
    final doc = await users.doc(uid).get();
    return UserModel.fromMap(doc.data() as Map<String, dynamic>);
  }
}

logical Page.dart 
import 'package:flutter/material.dart';
import '../controllers/auth_controller.dart';

class LoginPage extends StatelessWidget {
  final emailController = TextEditingController();
  final passwordController = TextEditingController();
  final authController = AuthController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Login')),
      body: Column(
        children: [
          TextField(controller: emailController),
          TextField(controller: passwordController, obscureText: true),
          ElevatedButton(
            onPressed: () async {
              final user = await authController.signIn(
                emailController.text.trim(),
                passwordController.text.trim(),
              );
              if (user != null) {
                // Navigate to home
              }
            },
            child: Text('Login'),
          )
        ],
      ),
    );
  }
}



